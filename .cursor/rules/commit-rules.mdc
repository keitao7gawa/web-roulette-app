---
description: 
globs: 
alwaysApply: false
---
 ---
description: コミットルールと開発フロー
globs: "*"
alwaysApply: true
---

# コミットルール

## コミットメッセージ形式

コミットメッセージは以下の形式に従ってください：

```
<type>(<scope>): <subject>

<body>

<footer>
```

### Type

- **feat**: 新機能
- **fix**: バグ修正
- **docs**: ドキュメント関連
- **style**: コードスタイルの変更（インデント，セミコロン等）
- **refactor**: リファクタリング
- **test**: テスト関連
- **chore**: ビルドプロセスやツール，ライブラリ更新など

### Scope（任意）

変更の範囲を示します（例：ui，api，auth など）

### Subject

変更内容を簡潔に表現します（命令形で記述）：
- 最大50文字以内
- 先頭は小文字
- 末尾にピリオドなし

### Body（任意）

変更の詳細と理由を記述します：
- 何が変わったか
- なぜその変更が必要だったか
- 72文字で改行

### Footer（任意）

- Breaking Changes
- 関連Issue（例：`Fixes #123`，`Closes #456`）

## ブランチ命名規則

- `feature/<機能名>`: 新機能開発
- `fix/<問題名>`: バグ修正
- `docs/<ドキュメント名>`: ドキュメント更新
- `refactor/<リファクタリング対象>`: リファクタリング
- `test/<テスト対象>`: テスト追加・修正

## プルリクエスト

- 各PRはひとつの機能・修正に集中する
- 説明は具体的に変更内容を記述する
- レビュアーを設定する 