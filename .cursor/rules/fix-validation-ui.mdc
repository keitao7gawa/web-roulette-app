# Webルーレットアプリ - バリデーション・UI修正指示書

## 1. 対象Issue概要

### Issue 8: [BUG] 空の選択肢があっても新規選択肢が追加できる
- **問題:** 選択肢が空でも，改行キーや追加ボタンで新規選択肢の追加ができてしまう
- **期待される動作:** 選択肢が空の時は新しい選択肢の追加をできないようにする
- **影響箇所:** `app/components/OptionsEditor.tsx`，`app/hooks/useRoulette.ts`

### Issue 4: [BUG] 選択肢入力中に，すでに「〇〇が選ばれました」と表示されている
- **問題:** 最初の段階・選択肢の入力中なのに，すでに抽選結果のような表示（「選ばれた」等）がされてしまう
- **期待される動作:** 選択肢入力フェーズでは，「選ばれた」とはならない
- **影響箇所:** `app/components/Roulette.tsx`，`app/hooks/useRoulette.ts`

---

## 2. 解決の優先度・順序

1. **Issue 8「空の選択肢」バグ**を先に修正
2. **Issue 4「抽選結果の誤表示」バグ**を次に修正

---

## 3. 実装仕様

### 3.1. 選択肢追加バリデーション（Issue 8対応）

#### 3.1.1. バリデーションロジック
- 新規選択肢を追加する際，既存の選択肢入力欄が空の場合は追加不可にする
- 空欄判定は以下の条件で行う：
  - 文字列が空（`""`）
  - 文字列が空白文字のみ（`"   "`）
  - 文字列が`null`または`undefined`

#### 3.1.2. UI制御
- 追加ボタン/Enterキー押下時，空欄判定を実行
- 空欄が存在する場合：
  - 追加ボタンを無効化（`disabled`属性を追加）
  - 警告メッセージを表示：「未入力の選択肢があります」
- 空欄が解消された場合，追加ボタンを有効化

#### 3.1.3. 実装ファイル・関数
- `app/components/OptionsEditor.tsx`：
  - `handleAddOption`関数の修正
  - バリデーション関数の追加
  - UI状態管理の追加
- `app/hooks/useRoulette.ts`：
  - `addOption`関数の修正
  - バリデーションロジックの追加

### 3.2. フェーズ管理・抽選結果表示制御（Issue 4対応）

#### 3.2.1. アプリケーション状態の定義
```typescript
type AppPhase = 'input' | 'ready' | 'spinning' | 'result';
```

#### 3.2.2. 状態遷移ロジック
- **input**: 選択肢入力中（デフォルト状態）
- **ready**: 選択肢入力完了，抽選可能
- **spinning**: 抽選実行中
- **result**: 抽選結果表示中

#### 3.2.3. 表示制御
- `AppPhase === 'input'`の間は，抽選結果表示コンポーネントを非表示
- 抽選開始時（`AppPhase === 'spinning'`）にのみ結果表示を準備
- 結果確定時（`AppPhase === 'result'`）に結果表示

#### 3.2.4. 実装ファイル・関数
- `app/hooks/useRoulette.ts`：
  - `AppPhase`型の追加
  - `appPhase`状態の追加
  - 状態遷移関数の実装
- `app/components/Roulette.tsx`：
  - フェーズに応じた条件付きレンダリング
  - 結果表示の条件分岐

---

## 4. 実装手順

### Phase 1: Issue 8「空の選択肢」対応

#### Step 1: バリデーション関数の実装
1. `app/hooks/useRoulette.ts`に`validateOptions`関数を追加
2. 空欄チェックロジックを実装
3. `addOption`関数にバリデーションを統合

#### Step 2: UI制御の実装
1. `app/components/OptionsEditor.tsx`の`handleAddOption`を修正
2. バリデーション結果に基づくボタン状態管理
3. 警告メッセージの表示ロジック

#### Step 3: テストケースの作成
1. `app/lib/`内にテストファイルを作成
2. 空欄状態での追加禁止テスト
3. 正常な追加処理のテスト

### Phase 2: Issue 4「抽選結果誤表示」対応

#### Step 1: 状態管理の実装
1. `app/hooks/useRoulette.ts`に`AppPhase`型と状態を追加
2. 状態遷移関数（`setPhase`）を実装
3. 既存の関数にフェーズ管理を統合

#### Step 2: UI表示制御の実装
1. `app/components/Roulette.tsx`の条件付きレンダリング
2. フェーズに応じた結果表示の制御
3. 状態遷移のトリガー設定

#### Step 3: テストケースの作成
1. フェーズ管理のテスト
2. 表示制御のテスト
3. 状態遷移のテスト

---

## 5. 技術的考慮事項

### 5.1. パフォーマンス
- バリデーションは必要最小限のタイミングで実行
- 状態更新は`useCallback`で最適化

### 5.2. ユーザビリティ
- バリデーションエラーは即座にフィードバック
- フェーズ遷移は明確で分かりやすい

### 5.3. 保守性
- 型安全性を重視
- 関数の責務を明確に分離
- テストカバレッジを確保

---

## 6. 検証項目

### Issue 8 検証
- [ ] 空の選択肢がある場合，新規追加ができない
- [ ] 空欄解消後，新規追加が可能になる
- [ ] 警告メッセージが適切に表示される
- [ ] 追加ボタンの状態が適切に制御される

### Issue 4 検証
- [ ] 選択肢入力中は結果表示されない
- [ ] 抽選開始時に適切に状態が遷移する
- [ ] 結果表示は抽選完了後のみ表示される
- [ ] フェーズ遷移が適切に動作する

---

## 7. 参考情報

- 既存のコンポーネント構造：`app/components/`
- 状態管理ロジック：`app/hooks/useRoulette.ts`
- 型定義：`app/types/option.ts`
- テスト設定：`vitest.config.ts`
- 実装時はUI/UXの一貫性・バリデーションの堅牢性も重視。

---