# 割合入力機能実装ルール

## 📋 開発対象 Issue

- [#6 [FEATURE] 割合を文字で入力可能にする](https://github.com/keitao7gawa/web-roulette-app/issues/6)
    - **現状**: 重み付けはスライダーのみ
    - **希望**: 数値入力で直接重み付け調整できるインターフェースの追加

## 🎯 実装要件

### 1. UI/UX 要件
- スライダーの横に表示している割合表示をクリックすることで，数値入力による調整を可能にする
- 入力欄にはバリデーション（範囲外は弾くなど）を実装
- 入力欄とスライダーは双方向同期とする
- 入力値の即座反映とリアルタイム更新

### 2. 設計方針
- 既存の状態管理・コンポーネント構造を尊重する
- 追加要素は既存のUIレイアウトを大きく崩さずに配置
- コンポーネントの再利用性を考慮した設計

### 3. アクセシビリティ
- キーボード操作に配慮
- スクリーンリーダー対応
- フォーカス管理の適切な実装

### 4. テスト要件
- 入力値のバリデーション、同期動作のテストを追加すること
- 既存機能が壊れていないことを確認
- ユニットテストとインテグレーションテストの両方を実装

## 🏗️ 実装ガイドライン

### 対象ファイル
```
app/components/Roulette.tsx          # メインルーレットコンポーネント
app/components/OptionsEditor.tsx     # オプション編集コンポーネント
app/hooks/useRoulette.ts            # ルーレット状態管理フック
app/lib/validation.ts               # バリデーション関数
app/types/option.ts                 # オプション型定義
```

### 実装手順
1. **型定義の拡張** - 入力値の状態管理用の型を追加
2. **バリデーション関数** - 重み付け値の範囲チェックと正規化
3. **UIコンポーネント** - 数値入力フィールドとスライダーの統合
4. **状態同期** - 入力値とスライダー値の双方向バインディング
5. **テスト実装** - 各機能の動作確認

### 技術仕様
- **入力形式**: 数値（整数・小数対応）
- **範囲制限**: 0.1 ～ 100.0
- **精度**: 小数点以下1桁まで
- **同期方式**: React state + useEffect による双方向更新
- **バリデーション**: リアルタイムチェック + エラー表示

## 🔧 開発環境

### 必要な依存関係
```bash
# 既存の依存関係で対応可能
npm run dev          # 開発サーバー起動
npm run test         # テスト実行
npm run build        # ビルド確認
```

### 開発時の注意点
- 既存のスライダー機能を壊さないよう注意
- パフォーマンスを考慮した状態更新の実装
- モバイル対応（タッチ操作・キーボード入力）

## 📝 コード例

### 重み付け入力コンポーネント
```tsx
interface WeightInputProps {
  value: number;
  onChange: (value: number) => void;
  min?: number;
  max?: number;
  step?: number;
}

function WeightInput({ value, onChange, min = 0.1, max = 100, step = 0.1 }: WeightInputProps) {
  // 実装詳細
}
```

### バリデーション関数
```typescript
export function validateWeight(value: number, min = 0.1, max = 100): boolean {
  return value >= min && value <= max && !isNaN(value);
}

export function normalizeWeight(value: number, min = 0.1, max = 100): number {
  return Math.max(min, Math.min(max, value));
}
```

## ✅ 完了条件

- [ ] 数値入力フィールドの実装
- [ ] スライダーとの双方向同期
- [ ] バリデーション機能
- [ ] エラーハンドリング
- [ ] アクセシビリティ対応
- [ ] テスト実装
- [ ] 既存機能の動作確認
- [ ] コードレビュー完了

## 🚨 注意事項

- Issue で議論された内容や実装上の注意点があれば追記してください
- ルールに変更があった場合は必ず Pull Request でレビューを受けてください
- 実装前に既存コードの動作を十分に確認してください

## 📚 参考資料

- [Next.js App Router Documentation](https://nextjs.org/docs/app)
- [React Hook Form](https://react-hook-form.com/) - フォーム管理
- [Tailwind CSS](https://tailwindcss.com/) - スタイリング
- [Testing Library](https://testing-library.com/) - テスト実装
- ルールに変更があった場合は必ず Pull Request でレビューを受けてください。

---